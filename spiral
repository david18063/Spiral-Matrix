# include "utility.h"

const int M = 3;
const int N = 3;

int SpiralMatrix[M][N] = {};

void PrintSpiralMatrix()
{
    for(int i=0;i<M;i++)
    {
        for(int j=0;j<N;j++) cout<<setw(2)<<SpiralMatrix[i][j]<<" ";
        cout<<endl;
    }
}

bool IsFullMatrix()
{
    for(int i=0;i<M;i++) for(int j=0;j<N;j++) if(SpiralMatrix[i][j] == 0) return false;

    return true;
}

int getLastNumberY(int n)
{
    for(int i=0;i<M;i++) for(int j=0;j<N;j++) if(SpiralMatrix[i][j] == n) return i;

    return 0;
}

int getLastNumberX(int n)
{
    for(int i=0;i<M;i++) for(int j=0;j<N;j++) if(SpiralMatrix[i][j] == n) return j;

    return 0;
}

void FillSpiralMatrix()
{
    int i = 0;
    int j = 0;
    int Number = 1;

    SpiralMatrix[i][j] = Number;

    while(!IsFullMatrix())
    {
        i = getLastNumberY(Number);
        j = getLastNumberX(Number);

        while(j+1 < N and SpiralMatrix[i][j+1] == 0)
        {
            Number++;
            SpiralMatrix[i][j+1] = Number;
            j++;
        }

        i = getLastNumberY(Number);
        j = getLastNumberX(Number);

        while(i+1 < M and SpiralMatrix[i+1][j] == 0)
        {
            Number++;
            SpiralMatrix[i+1][j] = Number;
            i++;
        }

        i = getLastNumberY(Number);
        j = getLastNumberX(Number);

        while(j-1 >= 0 and SpiralMatrix[i][j-1] == 0)
        {
            Number++;
            SpiralMatrix[i][j-1] = Number;
            j--;
        }

        i = getLastNumberY(Number);
        j = getLastNumberX(Number);

        while(i-1 >= 0 and SpiralMatrix[i-1][j] == 0)
        {
            Number++;
            SpiralMatrix[i-1][j] = Number;
            i--;
        }
    }
}

int main()
{
    FillSpiralMatrix();
    PrintSpiralMatrix();

    return 0;
}
